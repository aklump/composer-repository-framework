var lunrIndex = [{"id":"changelog","title":"Changelog","body":"All notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https:\/\/keepachangelog.com\/en\/1.0.0\/),\nand this project adheres to [Semantic Versioning](https:\/\/semver.org\/spec\/v2.0.0.html).\n\n## [Unreleased]\n\n- Nothing to list"},{"id":"distributor","title":"Distributor","body":"The _distributor\/_ is the hosted portion of the respository, which should be the webroot on a live server, and the URL used in `repositories.url`.\n\n## Github Webhooks\n\n{distributor_url}\/api\/event.php?secret={API_SECRET}"},{"id":"readme","title":"Private Packagist for In the Loft Studios","body":"This repository is for indexing unpublished Composer dependencies.\n\n## Installation\n\n1. Create a public server and domain to act as the `repository` entry in _composer.json_ files of the depending projects.\n2. Configure an SSH user on the server for publishing changes to the repository.\n3. Setup key-based authentication for publishing to the repository server.\n4. Copy _.\/install\/config.sh_ to _.\/config.sh_; open _.\/config.sh_ and edit:\n    * Set `REPOSITORY_URL`, e.g. `https:\/\/packages.intheloftstudios.com`\n    * Set the SSH info for connecting to the repositry server.\n5. Copy _.\/install\/satis.json_ to _.\/satis.json_\n    * Open _.satis.json_ and set `name` (e.g., `aklump\/packages`) and `homepage`, which should match `REPOSITORY_URL` in _config.sh_.\n6. Copy _.\/install\/.env_ to _web\/.env_ and enter a strong value for `API_SECRET`.\n7. Make sure _.cache\/_ and _web\/_ directories are both writeable.\n8. Create a cronjob with the desired publish frequency that executes app\/bin\/on_cron.sh, e.g.\n    ```\n    *\/15 * * * 1-6 \/Users\/aklump\/Code\/Projects\/InTheLoftStudios\/InTheLoftStudios\/site-packages\/app\/bin\/on_cron.sh\n    ```\n\n## Adding a Package\n\nCreate a github hook to this url `https:\/\/packages.intheloftstudios.com\/api\/event.php?secret={API_SECRET}` for the `push` action.\n\n## Commands\n\nThese commands may be used, but are generally not necessary.\n\n* `bin\/rebuild.sh` Scans all packages for dependencies and builds the static dependency file.\n* `bin\/publish.sh` or `bin\/publish.sh -v` Push the existing dependency file to the repository server."},{"id":"publisher","title":"Publisher","body":"The publisher aspect of this project is responsible for building and managing the repository."},{"id":"repository_readme","title":"Repository Readme","body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."}]